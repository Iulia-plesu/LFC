//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/Plesu/Desktop/LFC_Tema2/LFC_Tema2/MiniLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, FLOAT=2, STRING=3, VOID=4, DOUBLE=5, IF=6, ELSE=7, FOR=8, WHILE=9, 
		RETURN=10, ID=11, NUMERIC=12, STRING_LITERAL=13, PLUS=14, MINUS=15, MULT=16, 
		DIV=17, EQ=18, NEQ=19, LT=20, LTE=21, GT=22, GTE=23, AND=24, OR=25, NOT=26, 
		ASSIGN=27, PLUS_ASSIGN=28, MINUS_ASSIGN=29, MULT_ASSIGN=30, DIV_ASSIGN=31, 
		LPAREN=32, RPAREN=33, LBRACE=34, RBRACE=35, COMMA=36, SEMICOLON=37, WHITESPACE=38, 
		COMMENT=39, LINE_COMMENT=40, INCREMENT=41, DECREMENT=42;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"INT", "FLOAT", "STRING", "VOID", "DOUBLE", "IF", "ELSE", "FOR", "WHILE", 
		"RETURN", "ID", "NUMERIC", "STRING_LITERAL", "PLUS", "MINUS", "MULT", 
		"DIV", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", "ASSIGN", 
		"PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "WHITESPACE", "COMMENT", 
		"LINE_COMMENT", "INCREMENT", "DECREMENT"
	};


	public MiniLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'string'", "'void'", "'double'", "'if'", "'else'", 
		"'for'", "'while'", "'return'", null, null, null, "'+'", "'-'", "'*'", 
		"'/'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'('", "')'", "'{'", "'}'", "','", 
		"';'", null, null, null, "'++'", "'--'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "FLOAT", "STRING", "VOID", "DOUBLE", "IF", "ELSE", "FOR", 
		"WHILE", "RETURN", "ID", "NUMERIC", "STRING_LITERAL", "PLUS", "MINUS", 
		"MULT", "DIV", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", 
		"ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "WHITESPACE", 
		"COMMENT", "LINE_COMMENT", "INCREMENT", "DECREMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,42,264,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,1,0,1,
		0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
		1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
		6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
		1,10,1,10,5,10,142,8,10,10,10,12,10,145,9,10,1,11,4,11,148,8,11,11,11,
		12,11,149,1,11,1,11,4,11,154,8,11,11,11,12,11,155,3,11,158,8,11,1,12,1,
		12,5,12,162,8,12,10,12,12,12,165,9,12,1,12,1,12,1,13,1,13,1,14,1,14,1,
		15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,
		20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,
		26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,
		31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,4,37,228,
		8,37,11,37,12,37,229,1,37,1,37,1,38,1,38,1,38,1,38,5,38,238,8,38,10,38,
		12,38,241,9,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,252,8,
		39,10,39,12,39,255,9,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,239,
		0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
		95,95,97,122,1,0,48,57,2,0,34,34,92,92,3,0,9,10,13,13,32,32,2,0,10,10,
		13,13,271,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
		0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
		1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
		0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,89,
		1,0,0,0,5,95,1,0,0,0,7,102,1,0,0,0,9,107,1,0,0,0,11,114,1,0,0,0,13,117,
		1,0,0,0,15,122,1,0,0,0,17,126,1,0,0,0,19,132,1,0,0,0,21,139,1,0,0,0,23,
		147,1,0,0,0,25,159,1,0,0,0,27,168,1,0,0,0,29,170,1,0,0,0,31,172,1,0,0,
		0,33,174,1,0,0,0,35,176,1,0,0,0,37,179,1,0,0,0,39,182,1,0,0,0,41,184,1,
		0,0,0,43,187,1,0,0,0,45,189,1,0,0,0,47,192,1,0,0,0,49,195,1,0,0,0,51,198,
		1,0,0,0,53,200,1,0,0,0,55,202,1,0,0,0,57,205,1,0,0,0,59,208,1,0,0,0,61,
		211,1,0,0,0,63,214,1,0,0,0,65,216,1,0,0,0,67,218,1,0,0,0,69,220,1,0,0,
		0,71,222,1,0,0,0,73,224,1,0,0,0,75,227,1,0,0,0,77,233,1,0,0,0,79,247,1,
		0,0,0,81,258,1,0,0,0,83,261,1,0,0,0,85,86,5,105,0,0,86,87,5,110,0,0,87,
		88,5,116,0,0,88,2,1,0,0,0,89,90,5,102,0,0,90,91,5,108,0,0,91,92,5,111,
		0,0,92,93,5,97,0,0,93,94,5,116,0,0,94,4,1,0,0,0,95,96,5,115,0,0,96,97,
		5,116,0,0,97,98,5,114,0,0,98,99,5,105,0,0,99,100,5,110,0,0,100,101,5,103,
		0,0,101,6,1,0,0,0,102,103,5,118,0,0,103,104,5,111,0,0,104,105,5,105,0,
		0,105,106,5,100,0,0,106,8,1,0,0,0,107,108,5,100,0,0,108,109,5,111,0,0,
		109,110,5,117,0,0,110,111,5,98,0,0,111,112,5,108,0,0,112,113,5,101,0,0,
		113,10,1,0,0,0,114,115,5,105,0,0,115,116,5,102,0,0,116,12,1,0,0,0,117,
		118,5,101,0,0,118,119,5,108,0,0,119,120,5,115,0,0,120,121,5,101,0,0,121,
		14,1,0,0,0,122,123,5,102,0,0,123,124,5,111,0,0,124,125,5,114,0,0,125,16,
		1,0,0,0,126,127,5,119,0,0,127,128,5,104,0,0,128,129,5,105,0,0,129,130,
		5,108,0,0,130,131,5,101,0,0,131,18,1,0,0,0,132,133,5,114,0,0,133,134,5,
		101,0,0,134,135,5,116,0,0,135,136,5,117,0,0,136,137,5,114,0,0,137,138,
		5,110,0,0,138,20,1,0,0,0,139,143,7,0,0,0,140,142,7,1,0,0,141,140,1,0,0,
		0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,22,1,0,0,0,145,143,
		1,0,0,0,146,148,7,2,0,0,147,146,1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,
		0,149,150,1,0,0,0,150,157,1,0,0,0,151,153,5,46,0,0,152,154,7,2,0,0,153,
		152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,
		0,0,0,157,151,1,0,0,0,157,158,1,0,0,0,158,24,1,0,0,0,159,163,5,34,0,0,
		160,162,8,3,0,0,161,160,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,163,164,
		1,0,0,0,164,166,1,0,0,0,165,163,1,0,0,0,166,167,5,34,0,0,167,26,1,0,0,
		0,168,169,5,43,0,0,169,28,1,0,0,0,170,171,5,45,0,0,171,30,1,0,0,0,172,
		173,5,42,0,0,173,32,1,0,0,0,174,175,5,47,0,0,175,34,1,0,0,0,176,177,5,
		61,0,0,177,178,5,61,0,0,178,36,1,0,0,0,179,180,5,33,0,0,180,181,5,61,0,
		0,181,38,1,0,0,0,182,183,5,60,0,0,183,40,1,0,0,0,184,185,5,60,0,0,185,
		186,5,61,0,0,186,42,1,0,0,0,187,188,5,62,0,0,188,44,1,0,0,0,189,190,5,
		62,0,0,190,191,5,61,0,0,191,46,1,0,0,0,192,193,5,38,0,0,193,194,5,38,0,
		0,194,48,1,0,0,0,195,196,5,124,0,0,196,197,5,124,0,0,197,50,1,0,0,0,198,
		199,5,33,0,0,199,52,1,0,0,0,200,201,5,61,0,0,201,54,1,0,0,0,202,203,5,
		43,0,0,203,204,5,61,0,0,204,56,1,0,0,0,205,206,5,45,0,0,206,207,5,61,0,
		0,207,58,1,0,0,0,208,209,5,42,0,0,209,210,5,61,0,0,210,60,1,0,0,0,211,
		212,5,47,0,0,212,213,5,61,0,0,213,62,1,0,0,0,214,215,5,40,0,0,215,64,1,
		0,0,0,216,217,5,41,0,0,217,66,1,0,0,0,218,219,5,123,0,0,219,68,1,0,0,0,
		220,221,5,125,0,0,221,70,1,0,0,0,222,223,5,44,0,0,223,72,1,0,0,0,224,225,
		5,59,0,0,225,74,1,0,0,0,226,228,7,4,0,0,227,226,1,0,0,0,228,229,1,0,0,
		0,229,227,1,0,0,0,229,230,1,0,0,0,230,231,1,0,0,0,231,232,6,37,0,0,232,
		76,1,0,0,0,233,234,5,47,0,0,234,235,5,42,0,0,235,239,1,0,0,0,236,238,9,
		0,0,0,237,236,1,0,0,0,238,241,1,0,0,0,239,240,1,0,0,0,239,237,1,0,0,0,
		240,242,1,0,0,0,241,239,1,0,0,0,242,243,5,42,0,0,243,244,5,47,0,0,244,
		245,1,0,0,0,245,246,6,38,0,0,246,78,1,0,0,0,247,248,5,47,0,0,248,249,5,
		47,0,0,249,253,1,0,0,0,250,252,8,5,0,0,251,250,1,0,0,0,252,255,1,0,0,0,
		253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,257,
		6,39,0,0,257,80,1,0,0,0,258,259,5,43,0,0,259,260,5,43,0,0,260,82,1,0,0,
		0,261,262,5,45,0,0,262,263,5,45,0,0,263,84,1,0,0,0,9,0,143,149,155,157,
		163,229,239,253,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
